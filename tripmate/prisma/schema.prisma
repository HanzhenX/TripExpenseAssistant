datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]
  groups        UserGroup[]
  Transaction   Transaction[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum GroupState {
  active
  settled
  hidden
}

model Group {
  id        String        @id @default(uuid())
  name      String
  state     GroupState    @default(active)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   UserGroup[]
  transactions Transaction[]

  @@map("group")
}

model UserGroup {
  id       String   @id @default(uuid())
  userId   String
  groupId  String
  role     String? // "admin", "member",
  joinedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_group")
}

model Transaction {
  id           String   @id @default(uuid())
  groupId      String
  paidByUserId String
  amount       Float
  imageUrl     String?
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  paidBy User  @relation(fields: [paidByUserId], references: [id], onDelete: Cascade)

  @@map("transaction")
}
